{"ast":null,"code":"import Artplayer from 'artplayer';\nexport default {\n  props: ['video'],\n  data() {\n    return {\n      videoUrl: '' // 视频的URL\n    };\n  },\n  created() {},\n  mounted() {\n    console.log(this.$route.query);\n    // 在组件挂载后，解析视频信息并获取视频的URL\n    console.log(\"video-player mounted\");\n    this.parseVideoInfo();\n  },\n  methods: {\n    startPlaying() {\n      const videoElement = this.$refs.videoRef;\n      videoElement.play();\n    },\n    handlePlay() {\n      this.isPlaying = true;\n    },\n    handlePause() {\n      this.isPlaying = false;\n    },\n    parseVideoInfo() {\n      // 解析视频信息\n      // const videoData = this.$route.params.video;\n      // this.video = JSON.parse(videoData);\n      this.videoUrl = this.$route.query.video_url;\n      var thumbUrl = this.videoUrl.replace('.mp4', '.webp');\n      console.log(this.thumbUrl);\n      var art = new Artplayer({\n        container: '.video-player',\n        url: this.videoUrl,\n        airplay: true,\n        playsInline: true,\n        autoSize: true,\n        lock: true,\n        fullscreen: true,\n        fullscreenWeb: true,\n        pip: true,\n        autoplay: true,\n        thumbnails: {\n          url: thumbUrl,\n          width: 300\n        },\n        moreVideoAttr: {\n          // @ts-ignore\n          \"webkit-playsinline\": true,\n          playsInline: true\n        },\n        fastForward: true,\n        autoPlayback: true,\n        autoOrientation: true\n      });\n      // art.play();\n      console.log(art);\n    }\n  }\n};","map":{"version":3,"names":["Artplayer","props","data","videoUrl","created","mounted","console","log","$route","query","parseVideoInfo","methods","startPlaying","videoElement","$refs","videoRef","play","handlePlay","isPlaying","handlePause","video_url","thumbUrl","replace","art","container","url","airplay","playsInline","autoSize","lock","fullscreen","fullscreenWeb","pip","autoplay","thumbnails","width","moreVideoAttr","fastForward","autoPlayback","autoOrientation"],"sources":["/home/worship_video/src/components/VideoPlayer.vue"],"sourcesContent":["<template>\n  <!-- <div class=\"video-player\"> -->\n  <!-- <div class=\"video-container\"> -->\n  <!-- <div class=\"artplayer-app\" ref=\"videoRef\" :src=\"videoUrl\" controls @play=\"handlePlay\" @pause=\"handlePause\"></div> -->\n  <!-- <div v-if=\"!isPlaying\" class=\"play-button\" @click=\"startPlaying\">\n          <i class=\"fa fa-play\"></i>\n        </div> -->\n  <!-- </div> -->\n  <!-- </div> -->\n  <div class=\"video-player\"></div>\n</template>\n\n\n<script>\nimport Artplayer from 'artplayer';\nexport default {\n  props: ['video'],\n  data() {\n    return {\n      videoUrl: '', // 视频的URL\n    };\n  },\n  created() {\n\n  },\n  mounted() {\n    console.log(this.$route.query);\n    // 在组件挂载后，解析视频信息并获取视频的URL\n    console.log(\"video-player mounted\");\n    this.parseVideoInfo();\n  },\n  methods: {\n    startPlaying() {\n      const videoElement = this.$refs.videoRef;\n      videoElement.play();\n    },\n    handlePlay() {\n      this.isPlaying = true;\n    },\n    handlePause() {\n      this.isPlaying = false;\n    },\n    parseVideoInfo() {\n      // 解析视频信息\n      // const videoData = this.$route.params.video;\n      // this.video = JSON.parse(videoData);\n      this.videoUrl = this.$route.query.video_url;\n      var thumbUrl = this.videoUrl.replace('.mp4', '.webp');\n      console.log(this.thumbUrl);\n      var art = new Artplayer({\n        container: '.video-player',\n        url: this.videoUrl,\n        airplay:true,\n        playsInline: true,\n        autoSize:true,\n        lock: true,\n        fullscreen:true,\n        fullscreenWeb:true,\n        pip:true,\n        autoplay: true,\n        thumbnails: {\n          url: thumbUrl,\n          width: 300,\n        },\n        moreVideoAttr: {\n      // @ts-ignore\n      \"webkit-playsinline\": true,\n      playsInline: true,\n    },\n      fastForward: true,\n      autoPlayback: true,\n      autoOrientation: true,\n      });\n      // art.play();\n      console.log(art);\n    },\n\n  },\n};\n</script>\n\n<style>\n.video-player {\n  /* 设置容器宽度为100% */\n  /* width: 100%; */\n  width: 100%;\n  height: 250px;\n  /* 可根据需要设置容器高度 */\n  /* height: 0; */\n  /* padding-bottom: 计算得到的百分比值(例如16:9的视频是56.25%) */\n  /* 这将根据视频的宽高比自动调整容器高度 */\n  /* padding-bottom: 56.25%;\n  position: relative;\n  overflow: hidden; */\n}\n\n.video-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.video-container video {\n  /* 设置视频元素填充父级容器 */\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.play-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n}\n\n.play-button i {\n  font-size: 50px;\n  color: #fff;\n}\n</style>"],"mappings":"AAcA,OAAOA,SAAQ,MAAO,WAAW;AACjC,eAAe;EACbC,KAAK,EAAE,CAAC,OAAO,CAAC;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG,CAEV,CAAC;EACDC,OAAOA,CAAA,EAAG;IACRC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;IAC9B;IACAH,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,IAAI,CAACG,cAAc,CAAC,CAAC;EACvB,CAAC;EACDC,OAAO,EAAE;IACPC,YAAYA,CAAA,EAAG;MACb,MAAMC,YAAW,GAAI,IAAI,CAACC,KAAK,CAACC,QAAQ;MACxCF,YAAY,CAACG,IAAI,CAAC,CAAC;IACrB,CAAC;IACDC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,SAAQ,GAAI,IAAI;IACvB,CAAC;IACDC,WAAWA,CAAA,EAAG;MACZ,IAAI,CAACD,SAAQ,GAAI,KAAK;IACxB,CAAC;IACDR,cAAcA,CAAA,EAAG;MACf;MACA;MACA;MACA,IAAI,CAACP,QAAO,GAAI,IAAI,CAACK,MAAM,CAACC,KAAK,CAACW,SAAS;MAC3C,IAAIC,QAAO,GAAI,IAAI,CAAClB,QAAQ,CAACmB,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;MACrDhB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACc,QAAQ,CAAC;MAC1B,IAAIE,GAAE,GAAI,IAAIvB,SAAS,CAAC;QACtBwB,SAAS,EAAE,eAAe;QAC1BC,GAAG,EAAE,IAAI,CAACtB,QAAQ;QAClBuB,OAAO,EAAC,IAAI;QACZC,WAAW,EAAE,IAAI;QACjBC,QAAQ,EAAC,IAAI;QACbC,IAAI,EAAE,IAAI;QACVC,UAAU,EAAC,IAAI;QACfC,aAAa,EAAC,IAAI;QAClBC,GAAG,EAAC,IAAI;QACRC,QAAQ,EAAE,IAAI;QACdC,UAAU,EAAE;UACVT,GAAG,EAAEJ,QAAQ;UACbc,KAAK,EAAE;QACT,CAAC;QACDC,aAAa,EAAE;UACjB;UACA,oBAAoB,EAAE,IAAI;UAC1BT,WAAW,EAAE;QACf,CAAC;QACCU,WAAW,EAAE,IAAI;QACjBC,YAAY,EAAE,IAAI;QAClBC,eAAe,EAAE;MACjB,CAAC,CAAC;MACF;MACAjC,OAAO,CAACC,GAAG,CAACgB,GAAG,CAAC;IAClB;EAEF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}