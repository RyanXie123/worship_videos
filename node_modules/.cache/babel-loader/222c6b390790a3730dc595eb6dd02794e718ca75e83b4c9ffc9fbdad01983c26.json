{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"video-player\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1"],"sources":["/home/worship_video/src/components/VideoPlayer.vue"],"sourcesContent":["<template>\n  <!-- <div class=\"video-player\"> -->\n  <!-- <div class=\"video-container\"> -->\n  <!-- <div class=\"artplayer-app\" ref=\"videoRef\" :src=\"videoUrl\" controls @play=\"handlePlay\" @pause=\"handlePause\"></div> -->\n  <!-- <div v-if=\"!isPlaying\" class=\"play-button\" @click=\"startPlaying\">\n          <i class=\"fa fa-play\"></i>\n        </div> -->\n  <!-- </div> -->\n  <!-- </div> -->\n  <div class=\"video-player\"></div>\n</template>\n\n\n<script>\nimport Artplayer from 'artplayer';\nexport default {\n  props: ['video'],\n  data() {\n    return {\n      videoUrl: '', // 视频的URL\n    };\n  },\n  created() {\n\n  },\n  mounted() {\n    console.log(this.$route.query);\n    // 在组件挂载后，解析视频信息并获取视频的URL\n    console.log(\"video-player mounted\");\n    this.parseVideoInfo();\n  },\n  methods: {\n    startPlaying() {\n      const videoElement = this.$refs.videoRef;\n      videoElement.play();\n    },\n    handlePlay() {\n      this.isPlaying = true;\n    },\n    handlePause() {\n      this.isPlaying = false;\n    },\n    parseVideoInfo() {\n      // 解析视频信息\n      // const videoData = this.$route.params.video;\n      // this.video = JSON.parse(videoData);\n      this.videoUrl = this.$route.query.video_url;\n\n      var art = new Artplayer({\n        container: '.video-player',\n        url: this.videoUrl,\n        airplay:true,\n        autoSize:true,\n        lock: true,\n        fullscreen:true,\n        fullscreenWeb:true,\n        autoplay: true,\n        moreVideoAttr: {\n      // @ts-ignore\n      \"webkit-playsinline\": true,\n      playsInline: true,\n    },\n      fastForward: true,\n      autoPlayback: true,\n      autoOrientation: true,\n      });\n      // art.play();\n      console.log(art);\n    },\n\n  },\n};\n</script>\n\n<style>\n.video-player {\n  /* 设置容器宽度为100% */\n  /* width: 100%; */\n  width: 100%;\n  height: 250px;\n  /* 可根据需要设置容器高度 */\n  /* height: 0; */\n  /* padding-bottom: 计算得到的百分比值(例如16:9的视频是56.25%) */\n  /* 这将根据视频的宽高比自动调整容器高度 */\n  /* padding-bottom: 56.25%;\n  position: relative;\n  overflow: hidden; */\n}\n\n.video-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.video-container video {\n  /* 设置视频元素填充父级容器 */\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n}\n\n.play-button {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  cursor: pointer;\n}\n\n.play-button i {\n  font-size: 50px;\n  color: #fff;\n}\n</style>"],"mappings":";;EASOA,KAAK,EAAC;AAAc;;uBAAzBC,mBAAA,CAAgC,OAAhCC,UAAgC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}